{
    "version": 3,
    "terraform_version": "0.9.2",
    "serial": 7,
    "lineage": "95ff593a-d88d-4dcc-888d-559e4f2e94e8",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "aws_autoscaling_group.elasticsearch_master_asg.0": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_master"
                    ],
                    "primary": {
                        "id": "prod-search-es-master-az1-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:7525eadf-173e-4354-8bd1-d62fee7335de:autoScalingGroupName/prod-search-es-master-az1-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2487133097": "us-west-2a",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-master-az1-asg",
                            "launch_configuration": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-master-az1-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1337858365.key": "make_dns",
                            "tag.1337858365.propagate_at_launch": "true",
                            "tag.1337858365.value": "master.aws-prod-cloudsearch",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.3195321043.key": "service_component",
                            "tag.3195321043.propagate_at_launch": "true",
                            "tag.3195321043.value": "es_master",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.3960211919.key": "Name",
                            "tag.3960211919.propagate_at_launch": "true",
                            "tag.3960211919.value": "prod-search-es-master01",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.3055898634": "subnet-ef59e88b",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.elasticsearch_master_asg.1": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_master"
                    ],
                    "primary": {
                        "id": "prod-search-es-master-az2-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:40bbb41c-f42f-4f42-9b39-6e7412f0894f:autoScalingGroupName/prod-search-es-master-az2-asg",
                            "availability_zones.#": "1",
                            "availability_zones.221770259": "us-west-2b",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-master-az2-asg",
                            "launch_configuration": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-master-az2-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1337858365.key": "make_dns",
                            "tag.1337858365.propagate_at_launch": "true",
                            "tag.1337858365.value": "master.aws-prod-cloudsearch",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.3195321043.key": "service_component",
                            "tag.3195321043.propagate_at_launch": "true",
                            "tag.3195321043.value": "es_master",
                            "tag.3722711890.key": "Name",
                            "tag.3722711890.propagate_at_launch": "true",
                            "tag.3722711890.value": "prod-search-es-master02",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.1133632401": "subnet-97d913e1",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.elasticsearch_master_asg.2": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_master"
                    ],
                    "primary": {
                        "id": "prod-search-es-master-az3-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:3d96ed2b-d2c0-4287-8eea-6e698daa05b2:autoScalingGroupName/prod-search-es-master-az3-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2050015877": "us-west-2c",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-master-az3-asg",
                            "launch_configuration": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-master-az3-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1337858365.key": "make_dns",
                            "tag.1337858365.propagate_at_launch": "true",
                            "tag.1337858365.value": "master.aws-prod-cloudsearch",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2073237734.key": "Name",
                            "tag.2073237734.propagate_at_launch": "true",
                            "tag.2073237734.value": "prod-search-es-master03",
                            "tag.3195321043.key": "service_component",
                            "tag.3195321043.propagate_at_launch": "true",
                            "tag.3195321043.value": "es_master",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.2624556745": "subnet-9dcad0c4",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.elasticsearch_node_asg.0": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-node-az1-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:3612146b-9720-4de6-9e7c-ba2d12c2a6ac:autoScalingGroupName/prod-search-es-node-az1-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2487133097": "us-west-2a",
                            "default_cooldown": "300",
                            "desired_capacity": "3",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-node-az1-asg",
                            "launch_configuration": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                            "load_balancers.#": "0",
                            "max_size": "3",
                            "metrics_granularity": "1Minute",
                            "min_size": "3",
                            "name": "prod-search-es-node-az1-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.206808554.key": "make_dns",
                            "tag.206808554.propagate_at_launch": "true",
                            "tag.206808554.value": "node.aws-prod-cloudsearch",
                            "tag.2674837473.key": "Name",
                            "tag.2674837473.propagate_at_launch": "true",
                            "tag.2674837473.value": "prod-search-es-node",
                            "tag.2950372525.key": "service_component",
                            "tag.2950372525.propagate_at_launch": "true",
                            "tag.2950372525.value": "es_node",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.3055898634": "subnet-ef59e88b",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.elasticsearch_node_asg.1": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-node-az2-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:e7ed7191-7500-4b47-b3c3-1c338a92aa25:autoScalingGroupName/prod-search-es-node-az2-asg",
                            "availability_zones.#": "1",
                            "availability_zones.221770259": "us-west-2b",
                            "default_cooldown": "300",
                            "desired_capacity": "3",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-node-az2-asg",
                            "launch_configuration": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                            "load_balancers.#": "0",
                            "max_size": "3",
                            "metrics_granularity": "1Minute",
                            "min_size": "3",
                            "name": "prod-search-es-node-az2-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.206808554.key": "make_dns",
                            "tag.206808554.propagate_at_launch": "true",
                            "tag.206808554.value": "node.aws-prod-cloudsearch",
                            "tag.2674837473.key": "Name",
                            "tag.2674837473.propagate_at_launch": "true",
                            "tag.2674837473.value": "prod-search-es-node",
                            "tag.2950372525.key": "service_component",
                            "tag.2950372525.propagate_at_launch": "true",
                            "tag.2950372525.value": "es_node",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.1133632401": "subnet-97d913e1",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.elasticsearch_node_asg.2": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.elasticsearch_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-node-az3-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:2f402538-71f7-4e87-a0e0-3ba3076eb2f1:autoScalingGroupName/prod-search-es-node-az3-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2050015877": "us-west-2c",
                            "default_cooldown": "300",
                            "desired_capacity": "3",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-node-az3-asg",
                            "launch_configuration": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                            "load_balancers.#": "0",
                            "max_size": "3",
                            "metrics_granularity": "1Minute",
                            "min_size": "3",
                            "name": "prod-search-es-node-az3-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.206808554.key": "make_dns",
                            "tag.206808554.propagate_at_launch": "true",
                            "tag.206808554.value": "node.aws-prod-cloudsearch",
                            "tag.2674837473.key": "Name",
                            "tag.2674837473.propagate_at_launch": "true",
                            "tag.2674837473.value": "prod-search-es-node",
                            "tag.2950372525.key": "service_component",
                            "tag.2950372525.propagate_at_launch": "true",
                            "tag.2950372525.value": "es_node",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.2624556745": "subnet-9dcad0c4",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.kibana_node_asg.0": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.kibana_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-kibana-az1-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:e35360ba-3a7e-4bc2-ba32-2e26b476de3f:autoScalingGroupName/prod-search-es-kibana-az1-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2487133097": "us-west-2a",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-kibana-az1-asg",
                            "launch_configuration": "search-kibana-es-node-00065d5449693880ea98229e2b",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-kibana-az1-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.1470323381.key": "make_dns",
                            "tag.1470323381.propagate_at_launch": "true",
                            "tag.1470323381.value": "es-kibana.aws-prod-cloudsearch",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2199958139.key": "Name",
                            "tag.2199958139.propagate_at_launch": "true",
                            "tag.2199958139.value": "prod-search-es-kibana",
                            "tag.3471673755.key": "service_component",
                            "tag.3471673755.propagate_at_launch": "true",
                            "tag.3471673755.value": "es_kibana",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.3055898634": "subnet-ef59e88b",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.kibana_node_asg.1": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.kibana_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-kibana-az2-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:76218947-95f6-402f-ac3d-58eb2eda98c4:autoScalingGroupName/prod-search-es-kibana-az2-asg",
                            "availability_zones.#": "1",
                            "availability_zones.221770259": "us-west-2b",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-kibana-az2-asg",
                            "launch_configuration": "search-kibana-es-node-00065d5449693880ea98229e2b",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-kibana-az2-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.1470323381.key": "make_dns",
                            "tag.1470323381.propagate_at_launch": "true",
                            "tag.1470323381.value": "es-kibana.aws-prod-cloudsearch",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2199958139.key": "Name",
                            "tag.2199958139.propagate_at_launch": "true",
                            "tag.2199958139.value": "prod-search-es-kibana",
                            "tag.3471673755.key": "service_component",
                            "tag.3471673755.propagate_at_launch": "true",
                            "tag.3471673755.value": "es_kibana",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.1133632401": "subnet-97d913e1",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.kibana_node_asg.2": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.kibana_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-kibana-az3-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:0f4e8cf1-1259-4963-a9c2-8ae1bbbc0820:autoScalingGroupName/prod-search-es-kibana-az3-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2050015877": "us-west-2c",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-kibana-az3-asg",
                            "launch_configuration": "search-kibana-es-node-00065d5449693880ea98229e2b",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-kibana-az3-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.1470323381.key": "make_dns",
                            "tag.1470323381.propagate_at_launch": "true",
                            "tag.1470323381.value": "es-kibana.aws-prod-cloudsearch",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2199958139.key": "Name",
                            "tag.2199958139.propagate_at_launch": "true",
                            "tag.2199958139.value": "prod-search-es-kibana",
                            "tag.3471673755.key": "service_component",
                            "tag.3471673755.propagate_at_launch": "true",
                            "tag.3471673755.value": "es_kibana",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.2624556745": "subnet-9dcad0c4",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.nginx_node_asg.0": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.nginx_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-nginx-az1-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:1514d68e-c8ac-49ff-8855-71b49a0eecce:autoScalingGroupName/prod-search-es-nginx-az1-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2487133097": "us-west-2a",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-nginx-az1-asg",
                            "launch_configuration": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-nginx-az1-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2478866543.key": "Name",
                            "tag.2478866543.propagate_at_launch": "true",
                            "tag.2478866543.value": "prod-search-es-nginx",
                            "tag.2655873328.key": "make_dns",
                            "tag.2655873328.propagate_at_launch": "true",
                            "tag.2655873328.value": "es-nginx.aws-prod-cloudsearch",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.3969529871.key": "service_component",
                            "tag.3969529871.propagate_at_launch": "true",
                            "tag.3969529871.value": "es_nginx",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.3055898634": "subnet-ef59e88b",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.nginx_node_asg.1": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.nginx_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-nginx-az2-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:ccd65a24-b56c-4d84-a8b5-fe2ee4847b53:autoScalingGroupName/prod-search-es-nginx-az2-asg",
                            "availability_zones.#": "1",
                            "availability_zones.221770259": "us-west-2b",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-nginx-az2-asg",
                            "launch_configuration": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-nginx-az2-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2478866543.key": "Name",
                            "tag.2478866543.propagate_at_launch": "true",
                            "tag.2478866543.value": "prod-search-es-nginx",
                            "tag.2655873328.key": "make_dns",
                            "tag.2655873328.propagate_at_launch": "true",
                            "tag.2655873328.value": "es-nginx.aws-prod-cloudsearch",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.3969529871.key": "service_component",
                            "tag.3969529871.propagate_at_launch": "true",
                            "tag.3969529871.value": "es_nginx",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.1133632401": "subnet-97d913e1",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_autoscaling_group.nginx_node_asg.2": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_launch_configuration.nginx_node"
                    ],
                    "primary": {
                        "id": "prod-search-es-nginx-az3-asg",
                        "attributes": {
                            "arn": "arn:aws:autoscaling:us-west-2:467524913882:autoScalingGroup:85be174a-b621-4145-a4a3-5eb0893b6dc9:autoScalingGroupName/prod-search-es-nginx-az3-asg",
                            "availability_zones.#": "1",
                            "availability_zones.2050015877": "us-west-2c",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "prod-search-es-nginx-az3-asg",
                            "launch_configuration": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                            "load_balancers.#": "0",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "prod-search-es-nginx-az3-asg",
                            "placement_group": "",
                            "protect_from_scale_in": "false",
                            "suspended_processes.#": "0",
                            "tag.#": "7",
                            "tag.1407229608.key": "pipeline_phase",
                            "tag.1407229608.propagate_at_launch": "true",
                            "tag.1407229608.value": "prod",
                            "tag.169118653.key": "sla",
                            "tag.169118653.propagate_at_launch": "true",
                            "tag.169118653.value": "prod",
                            "tag.2478866543.key": "Name",
                            "tag.2478866543.propagate_at_launch": "true",
                            "tag.2478866543.value": "prod-search-es-nginx",
                            "tag.2655873328.key": "make_dns",
                            "tag.2655873328.propagate_at_launch": "true",
                            "tag.2655873328.value": "es-nginx.aws-prod-cloudsearch",
                            "tag.3764539365.key": "jive_service",
                            "tag.3764539365.propagate_at_launch": "true",
                            "tag.3764539365.value": "cloudsearch",
                            "tag.3969529871.key": "service_component",
                            "tag.3969529871.propagate_at_launch": "true",
                            "tag.3969529871.value": "es_nginx",
                            "tag.398247614.key": "jive_subservice",
                            "tag.398247614.propagate_at_launch": "true",
                            "tag.398247614.value": "cloudsearch",
                            "target_group_arns.#": "0",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.2624556745": "subnet-9dcad0c4",
                            "wait_for_capacity_timeout": "10m"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_iam_instance_profile.ebs-attach-and-secrets": {
                    "type": "aws_iam_instance_profile",
                    "depends_on": [
                        "aws_iam_role.ebs-attach-and-secrets"
                    ],
                    "primary": {
                        "id": "ebs-attach-and-secrets-profile-cloudsearch",
                        "attributes": {
                            "arn": "arn:aws:iam::467524913882:instance-profile/ebs-attach-and-secrets-profile-cloudsearch",
                            "id": "ebs-attach-and-secrets-profile-cloudsearch",
                            "name": "ebs-attach-and-secrets-profile-cloudsearch",
                            "path": "/",
                            "roles.#": "1",
                            "roles.3456568726": "ebs-attach-and-secrets-role-cloudsearch",
                            "unique_id": "AIPAJVIQ3RBLYKLWEQP4M"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_iam_role.ebs-attach-and-secrets": {
                    "type": "aws_iam_role",
                    "depends_on": [],
                    "primary": {
                        "id": "ebs-attach-and-secrets-role-cloudsearch",
                        "attributes": {
                            "arn": "arn:aws:iam::467524913882:role/ebs-attach-and-secrets-role-cloudsearch",
                            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                            "create_date": "2017-04-19T20:14:31Z",
                            "id": "ebs-attach-and-secrets-role-cloudsearch",
                            "name": "ebs-attach-and-secrets-role-cloudsearch",
                            "path": "/",
                            "unique_id": "AROAI4D5PSDJ2MNAJAKB4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_iam_role_policy.ebs-attach-and-secrets": {
                    "type": "aws_iam_role_policy",
                    "depends_on": [
                        "aws_iam_role.ebs-attach-and-secrets"
                    ],
                    "primary": {
                        "id": "ebs-attach-and-secrets-role-cloudsearch:ebs-attach-and-secrets-policy-cloudsearch",
                        "attributes": {
                            "id": "ebs-attach-and-secrets-role-cloudsearch:ebs-attach-and-secrets-policy-cloudsearch",
                            "name": "ebs-attach-and-secrets-policy-cloudsearch",
                            "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                \"ec2:AttachVolume\",\n                \"ec2:CreateTags\",\n                \"ec2:Describe*\",\n                \"ec2:DetachVolume\",\n                \"elasticache:Describe*\",\n                \"rds:Describe*\",\n                \"route53:ListHostedZones\",\n                \"route53:ListResourceRecordSets\",\n                \"s3:ListAllMyBuckets\"\n              ],\n              \"Resource\": \"*\"\n        },\n        {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                  \"s3:GetBucketLocation\",\n                  \"s3:GetObject\",\n                  \"s3:ListBucket\"\n              ],\n              \"Resource\": [\n                  \"arn:aws:s3:::us-west-2-jive-data-prod-secrets\",\n                  \"arn:aws:s3:::us-west-2-jive-data-prod-secrets/*\",\n                  \"arn:aws:s3:::us-west-2-jive-data-pipeline-playbooks\",\n                  \"arn:aws:s3:::us-west-2-jive-data-pipeline-playbooks/*\"\n              ]\n        }\n    ]\n}\n",
                            "role": "ebs-attach-and-secrets-role-cloudsearch"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_launch_configuration.elasticsearch_master": {
                    "type": "aws_launch_configuration",
                    "depends_on": [],
                    "primary": {
                        "id": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                        "attributes": {
                            "associate_public_ip_address": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "enable_monitoring": "true",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "ebs-attach-and-secrets-profile-cloudsearch",
                            "id": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                            "image_id": "ami-d2c924b2",
                            "instance_type": "r4.large",
                            "key_name": "data-prod",
                            "name": "search-elasticsearch-master-00065d5449693880ea98229e2a",
                            "name_prefix": "search-elasticsearch-master-",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "0",
                            "root_block_device.0.volume_size": "30",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "2",
                            "security_groups.2470915587": "sg-4ecc6635",
                            "security_groups.3096041373": "sg-67564300",
                            "spot_price": "",
                            "user_data": "20043f00d25cc83c638cb830e34e41b387144a20",
                            "vpc_classic_link_id": "",
                            "vpc_classic_link_security_groups.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_launch_configuration.elasticsearch_node": {
                    "type": "aws_launch_configuration",
                    "depends_on": [],
                    "primary": {
                        "id": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                        "attributes": {
                            "associate_public_ip_address": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.3817660160.delete_on_termination": "false",
                            "ebs_block_device.3817660160.device_name": "/dev/xvdm",
                            "ebs_block_device.3817660160.encrypted": "true",
                            "ebs_block_device.3817660160.iops": "0",
                            "ebs_block_device.3817660160.snapshot_id": "",
                            "ebs_block_device.3817660160.volume_size": "5",
                            "ebs_block_device.3817660160.volume_type": "gp2",
                            "ebs_optimized": "true",
                            "enable_monitoring": "true",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "ebs-attach-and-secrets-profile-cloudsearch",
                            "id": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                            "image_id": "ami-d2c924b2",
                            "instance_type": "i3.2xlarge",
                            "key_name": "data-prod",
                            "name": "search-elasticsearch-node-00065d5449693880ea98229e2c",
                            "name_prefix": "search-elasticsearch-node-",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "0",
                            "root_block_device.0.volume_size": "20",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "2",
                            "security_groups.2470915587": "sg-4ecc6635",
                            "security_groups.3096041373": "sg-67564300",
                            "spot_price": "",
                            "user_data": "20043f00d25cc83c638cb830e34e41b387144a20",
                            "vpc_classic_link_id": "",
                            "vpc_classic_link_security_groups.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_launch_configuration.kibana_node": {
                    "type": "aws_launch_configuration",
                    "depends_on": [],
                    "primary": {
                        "id": "search-kibana-es-node-00065d5449693880ea98229e2b",
                        "attributes": {
                            "associate_public_ip_address": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "enable_monitoring": "true",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "ebs-attach-and-secrets-profile-cloudsearch",
                            "id": "search-kibana-es-node-00065d5449693880ea98229e2b",
                            "image_id": "ami-d2c924b2",
                            "instance_type": "t2.small",
                            "key_name": "data-prod",
                            "name": "search-kibana-es-node-00065d5449693880ea98229e2b",
                            "name_prefix": "search-kibana-es-node-",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "false",
                            "root_block_device.0.iops": "0",
                            "root_block_device.0.volume_size": "50",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "2",
                            "security_groups.275833150": "sg-f4cc668f",
                            "security_groups.3096041373": "sg-67564300",
                            "spot_price": "",
                            "user_data": "1609183dce5210ed0d792a28e6b145fd1fdfb621",
                            "vpc_classic_link_id": "",
                            "vpc_classic_link_security_groups.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_launch_configuration.nginx_node": {
                    "type": "aws_launch_configuration",
                    "depends_on": [
                        "aws_security_group.nginx_ports",
                        "data.template_file.user_data"
                    ],
                    "primary": {
                        "id": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                        "attributes": {
                            "associate_public_ip_address": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "enable_monitoring": "true",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "ebs-attach-and-secrets-profile-cloudsearch",
                            "id": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                            "image_id": "ami-d2c924b2",
                            "instance_type": "t2.small",
                            "key_name": "data-prod",
                            "name": "search-nginx-es-node-00000ce7c03085c87f6edfc58e",
                            "name_prefix": "search-nginx-es-node-",
                            "root_block_device.#": "0",
                            "security_groups.#": "2",
                            "security_groups.3096041373": "sg-67564300",
                            "security_groups.928588570": "sg-76c2680d",
                            "spot_price": "",
                            "user_data": "1609183dce5210ed0d792a28e6b145fd1fdfb621",
                            "vpc_classic_link_id": "",
                            "vpc_classic_link_security_groups.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_s3_bucket.snapshot_bucket": {
                    "type": "aws_s3_bucket",
                    "depends_on": [
                        "data.template_file.s3_policy"
                    ],
                    "primary": {
                        "id": "us-west-2-jive-data-prod-cloudsearch-snaps",
                        "attributes": {
                            "acceleration_status": "",
                            "acl": "private",
                            "arn": "arn:aws:s3:::us-west-2-jive-data-prod-cloudsearch-snaps",
                            "bucket": "us-west-2-jive-data-prod-cloudsearch-snaps",
                            "bucket_domain_name": "us-west-2-jive-data-prod-cloudsearch-snaps.s3.amazonaws.com",
                            "force_destroy": "false",
                            "hosted_zone_id": "Z3BJ6K6RIION7M",
                            "id": "us-west-2-jive-data-prod-cloudsearch-snaps",
                            "policy": "{\"Statement\":[{\"Action\":[\"s3:ListBucket\",\"s3:GetBucketLocation\",\"s3:ListBucketMultipartUploads\",\"s3:ListBucketVersions\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::467524913882:role/ebs-attach-and-secrets-role-cloudsearch\"},\"Resource\":\"arn:aws:s3:::us-west-2-jive-data-prod-cloudsearch-snaps\",\"Sid\":\"statement201609211128\"},{\"Action\":[\"s3:GetObject\",\"s3:PutObject\",\"s3:DeleteObject\",\"s3:AbortMultipartUpload\",\"s3:ListMultipartUploadParts\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::467524913882:role/ebs-attach-and-secrets-role-cloudsearch\"},\"Resource\":\"arn:aws:s3:::us-west-2-jive-data-prod-cloudsearch-snaps/*\",\"Sid\":\"statement201609211130\"}],\"Version\":\"2012-10-17\"}",
                            "region": "us-west-2",
                            "request_payer": "BucketOwner",
                            "tags.%": "6",
                            "tags.Name": "prod-cloudsearch-elasticsearch-snapshots",
                            "tags.jive_service": "cloudsearch",
                            "tags.jive_subservice": "cloudsearch",
                            "tags.pipeline_phase": "prod",
                            "tags.service_component": "elasticsearch_snapshots",
                            "tags.sla": "prod",
                            "versioning.#": "1",
                            "versioning.0.enabled": "false",
                            "versioning.0.mfa_delete": "false",
                            "website.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group.elasticsearch_ports": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-4ecc6635",
                        "attributes": {
                            "description": "Allow traffic on ye olde elasticsearch ports",
                            "egress.#": "1",
                            "egress.3563209066.cidr_blocks.#": "1",
                            "egress.3563209066.cidr_blocks.0": "0.0.0.0/8",
                            "egress.3563209066.from_port": "0",
                            "egress.3563209066.ipv6_cidr_blocks.#": "0",
                            "egress.3563209066.prefix_list_ids.#": "0",
                            "egress.3563209066.protocol": "-1",
                            "egress.3563209066.security_groups.#": "0",
                            "egress.3563209066.self": "false",
                            "egress.3563209066.to_port": "0",
                            "id": "sg-4ecc6635",
                            "ingress.#": "2",
                            "ingress.2208294858.cidr_blocks.#": "1",
                            "ingress.2208294858.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.2208294858.from_port": "9300",
                            "ingress.2208294858.ipv6_cidr_blocks.#": "0",
                            "ingress.2208294858.protocol": "tcp",
                            "ingress.2208294858.security_groups.#": "0",
                            "ingress.2208294858.self": "false",
                            "ingress.2208294858.to_port": "9300",
                            "ingress.443847884.cidr_blocks.#": "1",
                            "ingress.443847884.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.443847884.from_port": "9200",
                            "ingress.443847884.ipv6_cidr_blocks.#": "0",
                            "ingress.443847884.protocol": "tcp",
                            "ingress.443847884.security_groups.#": "0",
                            "ingress.443847884.self": "false",
                            "ingress.443847884.to_port": "9200",
                            "name": "cloudsearch_elasticsearch_ports",
                            "owner_id": "467524913882",
                            "tags.%": "0",
                            "vpc_id": "vpc-cc77c2a8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group.kibana_ports": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-f4cc668f",
                        "attributes": {
                            "description": "Allow traffic on port 5601",
                            "egress.#": "1",
                            "egress.3563209066.cidr_blocks.#": "1",
                            "egress.3563209066.cidr_blocks.0": "0.0.0.0/8",
                            "egress.3563209066.from_port": "0",
                            "egress.3563209066.ipv6_cidr_blocks.#": "0",
                            "egress.3563209066.prefix_list_ids.#": "0",
                            "egress.3563209066.protocol": "-1",
                            "egress.3563209066.security_groups.#": "0",
                            "egress.3563209066.self": "false",
                            "egress.3563209066.to_port": "0",
                            "id": "sg-f4cc668f",
                            "ingress.#": "2",
                            "ingress.2216620219.cidr_blocks.#": "1",
                            "ingress.2216620219.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.2216620219.from_port": "443",
                            "ingress.2216620219.ipv6_cidr_blocks.#": "0",
                            "ingress.2216620219.protocol": "tcp",
                            "ingress.2216620219.security_groups.#": "0",
                            "ingress.2216620219.self": "false",
                            "ingress.2216620219.to_port": "443",
                            "ingress.3113294704.cidr_blocks.#": "1",
                            "ingress.3113294704.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.3113294704.from_port": "5601",
                            "ingress.3113294704.ipv6_cidr_blocks.#": "0",
                            "ingress.3113294704.protocol": "tcp",
                            "ingress.3113294704.security_groups.#": "0",
                            "ingress.3113294704.self": "false",
                            "ingress.3113294704.to_port": "5601",
                            "name": "cloudsearch_kibana_ports",
                            "owner_id": "467524913882",
                            "tags.%": "0",
                            "vpc_id": "vpc-cc77c2a8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group.nginx_ports": {
                    "type": "aws_security_group",
                    "depends_on": [],
                    "primary": {
                        "id": "sg-76c2680d",
                        "attributes": {
                            "description": "Allow traffic on port 443",
                            "egress.#": "1",
                            "egress.3563209066.cidr_blocks.#": "1",
                            "egress.3563209066.cidr_blocks.0": "0.0.0.0/8",
                            "egress.3563209066.from_port": "0",
                            "egress.3563209066.ipv6_cidr_blocks.#": "0",
                            "egress.3563209066.prefix_list_ids.#": "0",
                            "egress.3563209066.protocol": "-1",
                            "egress.3563209066.security_groups.#": "0",
                            "egress.3563209066.self": "false",
                            "egress.3563209066.to_port": "0",
                            "id": "sg-76c2680d",
                            "ingress.#": "1",
                            "ingress.2216620219.cidr_blocks.#": "1",
                            "ingress.2216620219.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.2216620219.from_port": "443",
                            "ingress.2216620219.ipv6_cidr_blocks.#": "0",
                            "ingress.2216620219.protocol": "tcp",
                            "ingress.2216620219.security_groups.#": "0",
                            "ingress.2216620219.self": "false",
                            "ingress.2216620219.to_port": "443",
                            "name": "cloudsearch_nginx_ports",
                            "owner_id": "467524913882",
                            "tags.%": "0",
                            "vpc_id": "vpc-cc77c2a8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.elasticsearch_egress": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-2765134644",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "0.0.0.0/8",
                            "from_port": "0",
                            "id": "sgrule-2765134644",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "-1",
                            "security_group_id": "sg-4ecc6635",
                            "self": "false",
                            "to_port": "0",
                            "type": "egress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.elasticsearch_port_9200": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-2158666048",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "9200",
                            "id": "sgrule-2158666048",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "tcp",
                            "security_group_id": "sg-4ecc6635",
                            "self": "false",
                            "to_port": "9200",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.elasticsearch_port_9300": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-536657835",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "9300",
                            "id": "sgrule-536657835",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "tcp",
                            "security_group_id": "sg-4ecc6635",
                            "self": "false",
                            "to_port": "9300",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.kibana_egress": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.kibana_ports"
                    ],
                    "primary": {
                        "id": "sgrule-3383644158",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "0.0.0.0/8",
                            "from_port": "0",
                            "id": "sgrule-3383644158",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "-1",
                            "security_group_id": "sg-f4cc668f",
                            "self": "false",
                            "to_port": "0",
                            "type": "egress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.kibana_port_443": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.kibana_ports"
                    ],
                    "primary": {
                        "id": "sgrule-3515148809",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "443",
                            "id": "sgrule-3515148809",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "tcp",
                            "security_group_id": "sg-f4cc668f",
                            "self": "false",
                            "to_port": "443",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.kibana_port_5601": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.kibana_ports"
                    ],
                    "primary": {
                        "id": "sgrule-1167218588",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "5601",
                            "id": "sgrule-1167218588",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "tcp",
                            "security_group_id": "sg-f4cc668f",
                            "self": "false",
                            "to_port": "5601",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.nginx_egress": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.nginx_ports"
                    ],
                    "primary": {
                        "id": "sgrule-2633474486",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "0.0.0.0/8",
                            "from_port": "0",
                            "id": "sgrule-2633474486",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "-1",
                            "security_group_id": "sg-76c2680d",
                            "self": "false",
                            "to_port": "0",
                            "type": "egress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "aws_security_group_rule.nginx_port_443": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.nginx_ports"
                    ],
                    "primary": {
                        "id": "sgrule-1460872686",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "443",
                            "id": "sgrule-1460872686",
                            "ipv6_cidr_blocks.#": "0",
                            "prefix_list_ids.#": "0",
                            "protocol": "tcp",
                            "security_group_id": "sg-76c2680d",
                            "self": "false",
                            "to_port": "443",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.elasticsearch_user_data": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "38bfdcfb3bebe6284f7ff05d261db37dc9c9980c4b952496166b35a713e0e828",
                        "attributes": {
                            "id": "38bfdcfb3bebe6284f7ff05d261db37dc9c9980c4b952496166b35a713e0e828",
                            "rendered": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=\nADDITIONAL_BUNDLE_NAME=ansible-playbooks-aws\nADDITIONAL_BUNDLE_VERSION=2.7.LATEST\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p ${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region us-west-2 kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"us-west-2\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: ${pipeline_phase}\"\necho \"Jive_service: ${jive_service}\"\necho \"Jive_subservice: ${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=${PAIR[0]}\n  mountp=${PAIR[1]}\n  echo \"Device: ${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: ${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p ${mountp}\n\n  if [ -z ${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: ${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for ${device}\"\n    continue\n  fi\n\n  echo \"Current volume: ${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: ${current_volume}\"\n    aws ec2 detach-volume --region ${region} --volume-id ${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: ${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename ${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region ${region} --volume-id ${previous_volume} --instance-id ${instance_id} --device ${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: ${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 ${device}\"\n    mkfs -t ext4 ${device}\n  fi\n  \n  echo \"mount ${device} ${mountp}\"\n  mount ${device} ${mountp}\n  echo \"${device} ${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\\\"${name}\\\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\"\n  aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\"${name}\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/ebs_mount.sh\n    ${INSTALL_DIRECTORY}/ebs_mount.sh -d /dev/xvdm:/data 2\u003e\u00261 \u003e\u003e ${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=${GAV_COORD[0]}\n             ARTIFACT_ID=${GAV_COORD[1]}\n             VERSION=${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=${NEXUS_BASE}${REST_PATH}${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in ${!PARAM_KEYS[*]}\ndo\n  if [[ ${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"${PARAMS}${PARAM_KEYS[$index]}=${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"${REDIRECT_URL}?${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L ${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    ${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e ${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/${ADDITIONAL_BUNDLE_NAME}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p ${INSTALL_DIRECTORY}/ansible-common\n    tar xf ${INSTALL_DIRECTORY}/ansible-common.tar.gz -C ${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n      tar xf ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz -C ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost ${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e ${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "template": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=${skip_ebs_reattach}\nADDITIONAL_BUNDLE_NAME=${bundle_name}\nADDITIONAL_BUNDLE_VERSION=${bundle_version}\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p $${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"$${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region ${region} kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"${region}\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: $${pipeline_phase}\"\necho \"Jive_service: $${jive_service}\"\necho \"Jive_subservice: $${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=$${PAIR[0]}\n  mountp=$${PAIR[1]}\n  echo \"Device: $${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: $${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p $${mountp}\n\n  if [ -z $${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: $${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for $${device}\"\n    continue\n  fi\n\n  echo \"Current volume: $${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: $${current_volume}\"\n    aws ec2 detach-volume --region $${region} --volume-id $${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: $${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename $${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region $${region} --volume-id $${previous_volume} --instance-id $${instance_id} --device $${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: $${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=$${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 $${device}\"\n    mkfs -t ext4 $${device}\n  fi\n  \n  echo \"mount $${device} $${mountp}\"\n  mount $${device} $${mountp}\n  echo \"$${device} $${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\\\"$${name}\\\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\"\n  aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\"$${name}\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/ebs_mount.sh\n    $${INSTALL_DIRECTORY}/ebs_mount.sh -d ${devices} 2\u003e\u00261 \u003e\u003e $${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=$${GAV_COORD[0]}\n             ARTIFACT_ID=$${GAV_COORD[1]}\n             VERSION=$${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=$${NEXUS_BASE}$${REST_PATH}$${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in $${!PARAM_KEYS[*]}\ndo\n  if [[ $${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"$${PARAMS}$${PARAM_KEYS[$index]}=$${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"$${REDIRECT_URL}?$${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L $${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    $${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e $${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/$${ADDITIONAL_BUNDLE_NAME}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p $${INSTALL_DIRECTORY}/ansible-common\n    tar xf $${INSTALL_DIRECTORY}/ansible-common.tar.gz -C $${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n      tar xf $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz -C $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost $${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e $${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "vars.%": "7",
                            "vars.account_name": "jive-data-prod",
                            "vars.bundle_name": "ansible-playbooks-aws",
                            "vars.bundle_version": "2.7.LATEST",
                            "vars.devices": "/dev/xvdm:/data",
                            "vars.pipeline_phase": "prod",
                            "vars.region": "us-west-2",
                            "vars.skip_ebs_reattach": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.kibana_user_data": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c1cef62568ee72358a656d2932b800e013eab1eb4ef234e95edfa3fea6cb4f17",
                        "attributes": {
                            "id": "c1cef62568ee72358a656d2932b800e013eab1eb4ef234e95edfa3fea6cb4f17",
                            "rendered": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=true\nADDITIONAL_BUNDLE_NAME=ansible-playbooks-aws\nADDITIONAL_BUNDLE_VERSION=2.7.LATEST\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p ${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region us-west-2 kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"us-west-2\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: ${pipeline_phase}\"\necho \"Jive_service: ${jive_service}\"\necho \"Jive_subservice: ${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=${PAIR[0]}\n  mountp=${PAIR[1]}\n  echo \"Device: ${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: ${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p ${mountp}\n\n  if [ -z ${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: ${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for ${device}\"\n    continue\n  fi\n\n  echo \"Current volume: ${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: ${current_volume}\"\n    aws ec2 detach-volume --region ${region} --volume-id ${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: ${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename ${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region ${region} --volume-id ${previous_volume} --instance-id ${instance_id} --device ${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: ${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 ${device}\"\n    mkfs -t ext4 ${device}\n  fi\n  \n  echo \"mount ${device} ${mountp}\"\n  mount ${device} ${mountp}\n  echo \"${device} ${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\\\"${name}\\\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\"\n  aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\"${name}\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/ebs_mount.sh\n    ${INSTALL_DIRECTORY}/ebs_mount.sh -d /dev/xvdm:/data 2\u003e\u00261 \u003e\u003e ${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=${GAV_COORD[0]}\n             ARTIFACT_ID=${GAV_COORD[1]}\n             VERSION=${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=${NEXUS_BASE}${REST_PATH}${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in ${!PARAM_KEYS[*]}\ndo\n  if [[ ${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"${PARAMS}${PARAM_KEYS[$index]}=${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"${REDIRECT_URL}?${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L ${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    ${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e ${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/${ADDITIONAL_BUNDLE_NAME}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p ${INSTALL_DIRECTORY}/ansible-common\n    tar xf ${INSTALL_DIRECTORY}/ansible-common.tar.gz -C ${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n      tar xf ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz -C ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost ${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e ${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "template": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=${skip_ebs_reattach}\nADDITIONAL_BUNDLE_NAME=${bundle_name}\nADDITIONAL_BUNDLE_VERSION=${bundle_version}\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p $${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"$${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region ${region} kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"${region}\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: $${pipeline_phase}\"\necho \"Jive_service: $${jive_service}\"\necho \"Jive_subservice: $${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=$${PAIR[0]}\n  mountp=$${PAIR[1]}\n  echo \"Device: $${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: $${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p $${mountp}\n\n  if [ -z $${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: $${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for $${device}\"\n    continue\n  fi\n\n  echo \"Current volume: $${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: $${current_volume}\"\n    aws ec2 detach-volume --region $${region} --volume-id $${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: $${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename $${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region $${region} --volume-id $${previous_volume} --instance-id $${instance_id} --device $${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: $${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=$${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 $${device}\"\n    mkfs -t ext4 $${device}\n  fi\n  \n  echo \"mount $${device} $${mountp}\"\n  mount $${device} $${mountp}\n  echo \"$${device} $${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\\\"$${name}\\\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\"\n  aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\"$${name}\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/ebs_mount.sh\n    $${INSTALL_DIRECTORY}/ebs_mount.sh -d ${devices} 2\u003e\u00261 \u003e\u003e $${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=$${GAV_COORD[0]}\n             ARTIFACT_ID=$${GAV_COORD[1]}\n             VERSION=$${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=$${NEXUS_BASE}$${REST_PATH}$${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in $${!PARAM_KEYS[*]}\ndo\n  if [[ $${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"$${PARAMS}$${PARAM_KEYS[$index]}=$${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"$${REDIRECT_URL}?$${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L $${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    $${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e $${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/$${ADDITIONAL_BUNDLE_NAME}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p $${INSTALL_DIRECTORY}/ansible-common\n    tar xf $${INSTALL_DIRECTORY}/ansible-common.tar.gz -C $${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n      tar xf $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz -C $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost $${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e $${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "vars.%": "7",
                            "vars.account_name": "jive-data-prod",
                            "vars.bundle_name": "ansible-playbooks-aws",
                            "vars.bundle_version": "2.7.LATEST",
                            "vars.devices": "/dev/xvdm:/data",
                            "vars.pipeline_phase": "prod",
                            "vars.region": "us-west-2",
                            "vars.skip_ebs_reattach": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.s3_policy": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "766d66bb08e0c98dea7486f407a09a5d9f0daf52da724e26ec543b7185ac0691",
                        "attributes": {
                            "id": "766d66bb08e0c98dea7486f407a09a5d9f0daf52da724e26ec543b7185ac0691",
                            "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"statement201609211128\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::467524913882:role/ebs-attach-and-secrets-role-cloudsearch\"\n      },\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\"\n      ],\n      \"Resource\": \"arn:aws:s3:::us-west-2-jive-data-prod-cloudsearch-snaps\"\n    },\n    {\n      \"Sid\": \"statement201609211130\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::467524913882:role/ebs-attach-and-secrets-role-cloudsearch\"\n      },\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": \"arn:aws:s3:::us-west-2-jive-data-prod-cloudsearch-snaps/*\"\n    }\n  ]\n}\n",
                            "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"statement201609211128\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_account}:role/ebs-attach-and-secrets-role-${jive_subservice}\"\n      },\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\"\n      ],\n      \"Resource\": \"arn:aws:s3:::us-west-2-jive-data-${pipeline_phase}-${jive_subservice}-snaps\"\n    },\n    {\n      \"Sid\": \"statement201609211130\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_account}:role/ebs-attach-and-secrets-role-${jive_subservice}\"\n      },\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\": \"arn:aws:s3:::us-west-2-jive-data-${pipeline_phase}-${jive_subservice}-snaps/*\"\n    }\n  ]\n}\n",
                            "vars.%": "3",
                            "vars.aws_account": "467524913882",
                            "vars.jive_subservice": "cloudsearch",
                            "vars.pipeline_phase": "prod"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                },
                "data.template_file.user_data": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c1cef62568ee72358a656d2932b800e013eab1eb4ef234e95edfa3fea6cb4f17",
                        "attributes": {
                            "id": "c1cef62568ee72358a656d2932b800e013eab1eb4ef234e95edfa3fea6cb4f17",
                            "rendered": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=true\nADDITIONAL_BUNDLE_NAME=ansible-playbooks-aws\nADDITIONAL_BUNDLE_VERSION=2.7.LATEST\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p ${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region us-west-2 kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region us-west-2 kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"us-west-2\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: ${pipeline_phase}\"\necho \"Jive_service: ${jive_service}\"\necho \"Jive_subservice: ${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=${PAIR[0]}\n  mountp=${PAIR[1]}\n  echo \"Device: ${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: ${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p ${mountp}\n\n  if [ -z ${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} Name=tag:pipeline_phase,Values=${pipeline_phase} Name=tag:jive_service,Values=${jive_service} Name=tag:jive_subservice,Values=${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: ${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for ${device}\"\n    continue\n  fi\n\n  echo \"Current volume: ${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: ${current_volume}\"\n    aws ec2 detach-volume --region ${region} --volume-id ${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: ${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename ${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region ${region} --volume-id ${previous_volume} --instance-id ${instance_id} --device ${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: ${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 ${device}\"\n    mkfs -t ext4 ${device}\n  fi\n  \n  echo \"mount ${device} ${mountp}\"\n  mount ${device} ${mountp}\n  echo \"${device} ${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\\\"${name}\\\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\"\n  aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\"${name}\" Key=device,Value=${device} Key=pipeline_phase,Value=${pipeline_phase} Key=jive_service,Value=${jive_service} Key=jive_subservice,Value=${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/ebs_mount.sh\n    ${INSTALL_DIRECTORY}/ebs_mount.sh -d /dev/xvdm:/data 2\u003e\u00261 \u003e\u003e ${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=${GAV_COORD[0]}\n             ARTIFACT_ID=${GAV_COORD[1]}\n             VERSION=${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=${NEXUS_BASE}${REST_PATH}${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in ${!PARAM_KEYS[*]}\ndo\n  if [[ ${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"${PARAMS}${PARAM_KEYS[$index]}=${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"${REDIRECT_URL}?${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L ${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x ${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    ${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e ${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/${ADDITIONAL_BUNDLE_NAME}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p ${INSTALL_DIRECTORY}/ansible-common\n    tar xf ${INSTALL_DIRECTORY}/ansible-common.tar.gz -C ${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n      tar xf ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}.tgz -C ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost ${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  ${INSTALL_DIRECTORY}/${ADDITIONAL_BUNDLE_NAME}-${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    ${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e ${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "template": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible.sh\n#\nSKIP_EBS_REATTACH=${skip_ebs_reattach}\nADDITIONAL_BUNDLE_NAME=${bundle_name}\nADDITIONAL_BUNDLE_VERSION=${bundle_version}\nINSTALL_DIRECTORY=/opt/ansible\ndeclare -r instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)\n\nfunction_prep() {\n    mkdir -p $${INSTALL_DIRECTORY}\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_instance_store() {\n  yum install -y cryptsetup\n  passphrase=$(\u003c /dev/urandom tr -dc '_A-Za-z0-9@#%^_\\\\-\\\\=+' | head -c 256 | xargs -0 echo)\n\n  if [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\n  then\n    # this /could/ be a bit more flexible *wink!*\n\n    # set up disk encryption\n    echo \"cryptsetup luksFormat /dev/nvme0n1\"\n    echo $passphrase | cryptsetup luksFormat /dev/nvme0n1\n    UUID=$(cryptsetup luksUUID /dev/nvme0n1)\n    echo \"cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\"\n    echo \"$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n    echo \"mkfs.ext4 /dev/mapper/elasticsearch_data\"\n    mkfs.ext4 /dev/mapper/elasticsearch_data\n    echo \"mount /dev/mapper/elasticsearch_data /data\"\n    mkdir -p /data\n    mount /dev/mapper/elasticsearch_data /data\n\n    # encrypt and save the volume's password\n    echo \"aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext xxxxxx --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\"\n    aws --region ${region} kms encrypt --key-id 'alias/elasticsearch-instance-store-key' --plaintext \"$${passphrase}\" --query CiphertextBlob --output text | base64 -d \u003e /etc/.luks\n    unset passphrase\n\n    cat \u003c\u003c-EOM \u003e /etc/init.d/luks-mount\n#!/bin/bash\n# A quickly hacked together script to remount a luks volume at boot\n\n# Get the passphrase from KMS using the ciphertext\npassphrase=\\$(aws --region ${region} kms decrypt --ciphertext-blob fileb:///etc/.luks --output text --query Plaintext | base64 -d)\n\n# Open the LUKS volume\necho \"\\$passphrase\" | cryptsetup luksOpen --allow-discards UUID=$${UUID} elasticsearch_data\n\n# Mount the volume\nmount /dev/mapper/elasticsearch_data /data\nEOM\n\n    chmod 755 /etc/init.d/luks-mount\n\n    # will this work for Centos 7? No it will not.\n    #ln -s /etc/init.d/luks-mount /etc/rc3.d/S15luks\n\n    # so instead, create a systemd file:\n    cat \u003c\u003c-EOM \u003e /usr/lib/systemd/system/data_remount.service\n[Unit]\nDescription=Mount the ephemeral data volume\nDocumentation=\nBefore=elasticsearch.service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/init.d/luks-mount\n\n[Install]\nWantedBy=multi-user.target\nEOM\n\n    systemctl daemon-reload\n    systemctl enable data_remount\n\n  fi\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"${region}\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_subservice=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`jive_subservice`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: $${pipeline_phase}\"\necho \"Jive_service: $${jive_service}\"\necho \"Jive_subservice: $${jive_subservice}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=$${PAIR[0]}\n  mountp=$${PAIR[1]}\n  echo \"Device: $${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: $${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p $${mountp}\n\n  if [ -z $${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} Name=tag:pipeline_phase,Values=$${pipeline_phase} Name=tag:jive_service,Values=$${jive_service} Name=tag:jive_subservice,Values=$${jive_subservice} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: $${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for $${device}\"\n    continue\n  fi\n\n  echo \"Current volume: $${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: $${current_volume}\"\n    aws ec2 detach-volume --region $${region} --volume-id $${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: $${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    #sleep 120\n    device_name=$(basename $${device})\n    echo \"looking for detachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES != \"0\" ]]\n      then\n        echo \"$device_name gone. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name still attached. waiting...\"\n      sleep 5\n    done\n\n    # attach existing EBS\n    aws ec2 attach-volume --region $${region} --volume-id $${previous_volume} --instance-id $${instance_id} --device $${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: $${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    #echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    #sleep 120\n    echo \"looking for attachment of $device_name\"\n\n    while true\n    do\n      lsblk|grep $device_name 1\u003e/dev/null\n      RES=$?\n      if [[ $RES == \"0\" ]]\n      then\n        echo \"$device_name found. proceeding...\"\n        sleep 10\n        break\n      fi\n      echo \"$device_name not attached. waiting...\"\n      sleep 5\n    done\n\n    current_volume=$${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 $${device}\"\n    mkfs -t ext4 $${device}\n  fi\n  \n  echo \"mount $${device} $${mountp}\"\n  mount $${device} $${mountp}\n  echo \"$${device} $${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\\\"$${name}\\\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\"\n  aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\"$${name}\" Key=device,Value=$${device} Key=pipeline_phase,Value=$${pipeline_phase} Key=jive_service,Value=$${jive_service} Key=jive_subservice,Value=$${jive_subservice}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/ebs_mount.sh\n    $${INSTALL_DIRECTORY}/ebs_mount.sh -d ${devices} 2\u003e\u00261 \u003e\u003e $${INSTALL_DIRECTORY}/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=$${GAV_COORD[0]}\n             ARTIFACT_ID=$${GAV_COORD[1]}\n             VERSION=$${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=$${NEXUS_BASE}$${REST_PATH}$${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in $${!PARAM_KEYS[*]}\ndo\n  if [[ $${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"$${PARAMS}$${PARAM_KEYS[$index]}=$${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"$${REDIRECT_URL}?$${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L $${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x $${INSTALL_DIRECTORY}/get_nexus_artifact.sh\n    $${INSTALL_DIRECTORY}/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e $${INSTALL_DIRECTORY}/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      aws configure set s3.signature_version s3v4\n      aws s3 cp s3://us-west-2-jive-data-pipeline-playbooks/$${ADDITIONAL_BUNDLE_NAME}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    setenforce 0\n    # Create Ansible working directories\n    mkdir -p $${INSTALL_DIRECTORY}/ansible-common\n    tar xf $${INSTALL_DIRECTORY}/ansible-common.tar.gz -C $${INSTALL_DIRECTORY}/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n      tar xf $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}.tgz -C $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n#!/bin/bash\n\nansible-playbook -i localhost $${INSTALL_DIRECTORY}/ansible-common/playbook-generic-node.yml --connection=local\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  $${INSTALL_DIRECTORY}/$${ADDITIONAL_BUNDLE_NAME}-$${ADDITIONAL_BUNDLE_VERSION}/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh\n    $${INSTALL_DIRECTORY}/ansible-common/run_ansible.sh \u003e\u003e $${INSTALL_DIRECTORY}/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nif [[ $instance_type == \"i3.large\" ]] || [[ $instance_type == \"i3.xlarge\" ]] || [[ $instance_type == \"i3.2xlarge\" ]]\nthen\n  function_instance_store\nelse\n  function_ebs_attach\nfi\nfunction_nexus\nfunction_ansible\n#function_restart\n",
                            "vars.%": "7",
                            "vars.account_name": "jive-data-prod",
                            "vars.bundle_name": "ansible-playbooks-aws",
                            "vars.bundle_version": "2.7.LATEST",
                            "vars.devices": "/dev/xvdm:/data",
                            "vars.pipeline_phase": "prod",
                            "vars.region": "us-west-2",
                            "vars.skip_ebs_reattach": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        }
    ]
}
