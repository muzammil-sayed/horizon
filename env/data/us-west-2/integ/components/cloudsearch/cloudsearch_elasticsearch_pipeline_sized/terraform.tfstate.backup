{
    "version": 1,
    "serial": 29,
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "aws_autoscaling_group.elasticsearch_node_asg_az2": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_elb.cloudsearch-elasticsearch-elb",
                        "aws_launch_configuration.elasticsearch_node"
                    ],
                    "primary": {
                        "id": "integ-search-es-node-az2-asg",
                        "attributes": {
                            "availability_zones.#": "1",
                            "availability_zones.221770259": "us-west-2b",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "integ-search-es-node-az2-asg",
                            "launch_configuration": "search-elasticsearch-node-sqr2bazxufhdddywczab34eola",
                            "load_balancers.#": "1",
                            "load_balancers.1978501290": "cloudsearch-elasticsearch-elb",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "integ-search-es-node-az2-asg",
                            "placement_group": "",
                            "tag.#": "7",
                            "tag.1147540291.key": "Account_name",
                            "tag.1147540291.propagate_at_launch": "true",
                            "tag.1147540291.value": "jive-data-pipeline",
                            "tag.28981217.key": "Jive_service",
                            "tag.28981217.propagate_at_launch": "true",
                            "tag.28981217.value": "cloudsearch",
                            "tag.2909129921.key": "Service_component",
                            "tag.2909129921.propagate_at_launch": "true",
                            "tag.2909129921.value": "es_master02",
                            "tag.3309822508.key": "Name",
                            "tag.3309822508.propagate_at_launch": "true",
                            "tag.3309822508.value": "integ-search-es-node",
                            "tag.3767096825.key": "SLA",
                            "tag.3767096825.propagate_at_launch": "true",
                            "tag.3767096825.value": "non-prod",
                            "tag.4279558224.key": "Region",
                            "tag.4279558224.propagate_at_launch": "true",
                            "tag.4279558224.value": "us-west-2",
                            "tag.933975931.key": "Pipeline_phase",
                            "tag.933975931.propagate_at_launch": "true",
                            "tag.933975931.value": "integ",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.3438434156": "subnet-5d42f439",
                            "wait_for_capacity_timeout": "10m"
                        }
                    }
                },
                "aws_autoscaling_group.elasticsearch_node_asg_az3": {
                    "type": "aws_autoscaling_group",
                    "depends_on": [
                        "aws_elb.cloudsearch-elasticsearch-elb",
                        "aws_launch_configuration.elasticsearch_node"
                    ],
                    "primary": {
                        "id": "integ-search-es-node-az3-asg",
                        "attributes": {
                            "availability_zones.#": "1",
                            "availability_zones.2050015877": "us-west-2c",
                            "default_cooldown": "300",
                            "desired_capacity": "1",
                            "force_delete": "false",
                            "health_check_grace_period": "300",
                            "health_check_type": "EC2",
                            "id": "integ-search-es-node-az3-asg",
                            "launch_configuration": "search-elasticsearch-node-sqr2bazxufhdddywczab34eola",
                            "load_balancers.#": "1",
                            "load_balancers.1978501290": "cloudsearch-elasticsearch-elb",
                            "max_size": "1",
                            "metrics_granularity": "1Minute",
                            "min_size": "1",
                            "name": "integ-search-es-node-az3-asg",
                            "placement_group": "",
                            "tag.#": "7",
                            "tag.1147540291.key": "Account_name",
                            "tag.1147540291.propagate_at_launch": "true",
                            "tag.1147540291.value": "jive-data-pipeline",
                            "tag.185780085.key": "Service_component",
                            "tag.185780085.propagate_at_launch": "true",
                            "tag.185780085.value": "es_master03",
                            "tag.28981217.key": "Jive_service",
                            "tag.28981217.propagate_at_launch": "true",
                            "tag.28981217.value": "cloudsearch",
                            "tag.3309822508.key": "Name",
                            "tag.3309822508.propagate_at_launch": "true",
                            "tag.3309822508.value": "integ-search-es-node",
                            "tag.3767096825.key": "SLA",
                            "tag.3767096825.propagate_at_launch": "true",
                            "tag.3767096825.value": "non-prod",
                            "tag.4279558224.key": "Region",
                            "tag.4279558224.propagate_at_launch": "true",
                            "tag.4279558224.value": "us-west-2",
                            "tag.933975931.key": "Pipeline_phase",
                            "tag.933975931.propagate_at_launch": "true",
                            "tag.933975931.value": "integ",
                            "termination_policies.#": "0",
                            "vpc_zone_identifier.#": "1",
                            "vpc_zone_identifier.4008311263": "subnet-ece5feb5",
                            "wait_for_capacity_timeout": "10m"
                        }
                    }
                },
                "aws_elb.cloudsearch-elasticsearch-elb": {
                    "type": "aws_elb",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "cloudsearch-elasticsearch-elb",
                        "attributes": {
                            "access_logs.#": "0",
                            "availability_zones.#": "3",
                            "availability_zones.2050015877": "us-west-2c",
                            "availability_zones.221770259": "us-west-2b",
                            "availability_zones.2487133097": "us-west-2a",
                            "connection_draining": "false",
                            "connection_draining_timeout": "300",
                            "cross_zone_load_balancing": "true",
                            "dns_name": "internal-cloudsearch-elasticsearch-elb-819019619.us-west-2.elb.amazonaws.com",
                            "health_check.#": "1",
                            "health_check.0.healthy_threshold": "2",
                            "health_check.0.interval": "10",
                            "health_check.0.target": "HTTP:9200/_cluster/health",
                            "health_check.0.timeout": "5",
                            "health_check.0.unhealthy_threshold": "2",
                            "id": "cloudsearch-elasticsearch-elb",
                            "idle_timeout": "60",
                            "instances.#": "2",
                            "instances.2622849199": "i-079d380fec8f28038",
                            "instances.2916535997": "i-0edfc11e3aa325530",
                            "internal": "true",
                            "listener.#": "1",
                            "listener.1661633718.instance_port": "9200",
                            "listener.1661633718.instance_protocol": "http",
                            "listener.1661633718.lb_port": "9200",
                            "listener.1661633718.lb_protocol": "http",
                            "listener.1661633718.ssl_certificate_id": "",
                            "name": "cloudsearch-elasticsearch-elb",
                            "security_groups.#": "2",
                            "security_groups.3420714085": "sg-3e714158",
                            "security_groups.508058891": "sg-29c9c14e",
                            "source_security_group": "999547976641/integ-instance",
                            "source_security_group_id": "sg-29c9c14e",
                            "subnets.#": "3",
                            "subnets.3437233351": "subnet-cde823bb",
                            "subnets.3438434156": "subnet-5d42f439",
                            "subnets.4008311263": "subnet-ece5feb5",
                            "tags.#": "0",
                            "zone_id": "Z1H1FL5HABSF5"
                        }
                    }
                },
                "aws_elb.cloudsearch-kibana-elb": {
                    "type": "aws_elb",
                    "depends_on": [
                        "aws_security_group.kibana_ports"
                    ],
                    "primary": {
                        "id": "cloudsearch-kibana-elb",
                        "attributes": {
                            "access_logs.#": "0",
                            "availability_zones.#": "3",
                            "availability_zones.2050015877": "us-west-2c",
                            "availability_zones.221770259": "us-west-2b",
                            "availability_zones.2487133097": "us-west-2a",
                            "connection_draining": "false",
                            "connection_draining_timeout": "300",
                            "cross_zone_load_balancing": "false",
                            "dns_name": "internal-cloudsearch-kibana-elb-1073230973.us-west-2.elb.amazonaws.com",
                            "health_check.#": "1",
                            "health_check.0.healthy_threshold": "2",
                            "health_check.0.interval": "10",
                            "health_check.0.target": "HTTP:9200/_cluster/health",
                            "health_check.0.timeout": "5",
                            "health_check.0.unhealthy_threshold": "2",
                            "id": "cloudsearch-kibana-elb",
                            "idle_timeout": "60",
                            "instances.#": "0",
                            "internal": "true",
                            "listener.#": "1",
                            "listener.2607972038.instance_port": "5601",
                            "listener.2607972038.instance_protocol": "http",
                            "listener.2607972038.lb_port": "80",
                            "listener.2607972038.lb_protocol": "http",
                            "listener.2607972038.ssl_certificate_id": "",
                            "name": "cloudsearch-kibana-elb",
                            "security_groups.#": "2",
                            "security_groups.2864404786": "sg-afa5a8c9",
                            "security_groups.508058891": "sg-29c9c14e",
                            "source_security_group": "999547976641/integ-instance",
                            "source_security_group_id": "sg-29c9c14e",
                            "subnets.#": "3",
                            "subnets.3437233351": "subnet-cde823bb",
                            "subnets.3438434156": "subnet-5d42f439",
                            "subnets.4008311263": "subnet-ece5feb5",
                            "tags.#": "0",
                            "zone_id": "Z1H1FL5HABSF5"
                        }
                    }
                },
                "aws_launch_configuration.elasticsearch_node": {
                    "type": "aws_launch_configuration",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports",
                        "aws_security_group.kibana_ports",
                        "template_file.elasticsearch_user_data"
                    ],
                    "primary": {
                        "id": "search-elasticsearch-node-sqr2bazxufhdddywczab34eola",
                        "attributes": {
                            "associate_public_ip_address": "false",
                            "ebs_block_device.#": "1",
                            "ebs_block_device.3817660160.delete_on_termination": "false",
                            "ebs_block_device.3817660160.device_name": "/dev/xvdm",
                            "ebs_block_device.3817660160.encrypted": "true",
                            "ebs_block_device.3817660160.iops": "0",
                            "ebs_block_device.3817660160.snapshot_id": "",
                            "ebs_block_device.3817660160.volume_size": "500",
                            "ebs_block_device.3817660160.volume_type": "gp2",
                            "ebs_optimized": "true",
                            "enable_monitoring": "true",
                            "ephemeral_block_device.#": "0",
                            "iam_instance_profile": "ebs-attach-profile",
                            "id": "search-elasticsearch-node-sqr2bazxufhdddywczab34eola",
                            "image_id": "ami-d2c924b2",
                            "instance_type": "r3.xlarge",
                            "key_name": "data-pipeline",
                            "name": "search-elasticsearch-node-sqr2bazxufhdddywczab34eola",
                            "name_prefix": "search-elasticsearch-node-",
                            "root_block_device.#": "0",
                            "security_groups.#": "3",
                            "security_groups.2864404786": "sg-afa5a8c9",
                            "security_groups.3420714085": "sg-3e714158",
                            "security_groups.508058891": "sg-29c9c14e",
                            "spot_price": "",
                            "user_data": "a6bf55d3af167bd12484709130170daba96fdf0a"
                        }
                    }
                },
                "aws_security_group.elasticsearch_ports": {
                    "type": "aws_security_group",
                    "primary": {
                        "id": "sg-3e714158",
                        "attributes": {
                            "description": "Allow traffic on ye olde elasticsearch ports",
                            "egress.#": "1",
                            "egress.3563209066.cidr_blocks.#": "1",
                            "egress.3563209066.cidr_blocks.0": "0.0.0.0/8",
                            "egress.3563209066.from_port": "0",
                            "egress.3563209066.protocol": "-1",
                            "egress.3563209066.security_groups.#": "0",
                            "egress.3563209066.self": "false",
                            "egress.3563209066.to_port": "0",
                            "id": "sg-3e714158",
                            "ingress.#": "2",
                            "ingress.2208294858.cidr_blocks.#": "1",
                            "ingress.2208294858.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.2208294858.from_port": "9300",
                            "ingress.2208294858.protocol": "tcp",
                            "ingress.2208294858.security_groups.#": "0",
                            "ingress.2208294858.self": "false",
                            "ingress.2208294858.to_port": "9300",
                            "ingress.443847884.cidr_blocks.#": "1",
                            "ingress.443847884.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.443847884.from_port": "9200",
                            "ingress.443847884.protocol": "tcp",
                            "ingress.443847884.security_groups.#": "0",
                            "ingress.443847884.self": "false",
                            "ingress.443847884.to_port": "9200",
                            "name": "cloudsearch_elasticsearch_ports",
                            "owner_id": "999547976641",
                            "tags.#": "0",
                            "vpc_id": "vpc-5e92383a"
                        }
                    }
                },
                "aws_security_group.kibana_ports": {
                    "type": "aws_security_group",
                    "primary": {
                        "id": "sg-afa5a8c9",
                        "attributes": {
                            "description": "Allow traffic on ye olde kibana ports",
                            "egress.#": "0",
                            "id": "sg-afa5a8c9",
                            "ingress.#": "1",
                            "ingress.3113294704.cidr_blocks.#": "1",
                            "ingress.3113294704.cidr_blocks.0": "10.0.0.0/8",
                            "ingress.3113294704.from_port": "5601",
                            "ingress.3113294704.protocol": "tcp",
                            "ingress.3113294704.security_groups.#": "0",
                            "ingress.3113294704.self": "false",
                            "ingress.3113294704.to_port": "5601",
                            "name": "cloudsearch_kibana_ports",
                            "owner_id": "999547976641",
                            "tags.#": "0",
                            "vpc_id": "vpc-5e92383a"
                        }
                    }
                },
                "aws_security_group_rule.elasticsearch_egress": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-245120040",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "0.0.0.0/8",
                            "from_port": "0",
                            "id": "sgrule-245120040",
                            "protocol": "-1",
                            "security_group_id": "sg-3e714158",
                            "self": "false",
                            "to_port": "0",
                            "type": "egress"
                        },
                        "meta": {
                            "schema_version": "2"
                        }
                    }
                },
                "aws_security_group_rule.elasticsearch_port_9200": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-3226596038",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "9200",
                            "id": "sgrule-3226596038",
                            "protocol": "tcp",
                            "security_group_id": "sg-3e714158",
                            "self": "false",
                            "to_port": "9200",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        }
                    }
                },
                "aws_security_group_rule.elasticsearch_port_9300": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.elasticsearch_ports"
                    ],
                    "primary": {
                        "id": "sgrule-1594354733",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "9300",
                            "id": "sgrule-1594354733",
                            "protocol": "tcp",
                            "security_group_id": "sg-3e714158",
                            "self": "false",
                            "to_port": "9300",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        }
                    }
                },
                "aws_security_group_rule.kibana_port_5601": {
                    "type": "aws_security_group_rule",
                    "depends_on": [
                        "aws_security_group.kibana_ports"
                    ],
                    "primary": {
                        "id": "sgrule-2773195510",
                        "attributes": {
                            "cidr_blocks.#": "1",
                            "cidr_blocks.0": "10.0.0.0/8",
                            "from_port": "5601",
                            "id": "sgrule-2773195510",
                            "protocol": "tcp",
                            "security_group_id": "sg-afa5a8c9",
                            "self": "false",
                            "to_port": "5601",
                            "type": "ingress"
                        },
                        "meta": {
                            "schema_version": "2"
                        }
                    }
                },
                "template_file.elasticsearch_user_data": {
                    "type": "template_file",
                    "primary": {
                        "id": "6b3b9ec90f90c0596bf4c7200f928cd8defb9760f6fc65ed3a89f4f87d17cee5",
                        "attributes": {
                            "id": "6b3b9ec90f90c0596bf4c7200f928cd8defb9760f6fc65ed3a89f4f87d17cee5",
                            "rendered": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible_${BUNDLE_SHORT_NAME}.sh\n#\nSKIP_EBS_REATTACH=\nADDITIONAL_BUNDLE_NAME=com.jivesoftware.techops:ansible-cloudsearch-elasticsearch:LATEST\nBUNDLE_SHORT_NAME=cloudsearch\n\nfunction_prep() {\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e /tmp/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"us-west-2\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids ${instance_id} --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: ${pipeline_phase}\"\necho \"Jive_service: ${jive_service}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=${PAIR[0]}\n  mountp=${PAIR[1]}\n  echo \"Device: ${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: ${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p ${mountp}\n\n  if [ -z ${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=tag:Pipeline_phase,Values=${pipeline_phase} Name=tag:Jive_service,Values=${jive_service} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=available Name=tag:device,Values=${device} Name=tag:Name,Values=${name} Name=tag:Pipeline_phase,Values=${pipeline_phase} Name=tag:Jive_service,Values=${jive_service} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: ${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region ${region} --filters Name=availability-zone,Values=${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=${instance_id} Name=attachment.device,Values=${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for ${device}\"\n    continue\n  fi\n\n  echo \"Current volume: ${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: ${current_volume}\"\n    aws ec2 detach-volume --region ${region} --volume-id ${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: ${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    sleep 120\n\n    # attach existing EBS\n    aws ec2 attach-volume --region ${region} --volume-id ${previous_volume} --instance-id ${instance_id} --device ${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: ${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    sleep 120\n\n    current_volume=${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 ${device}\"\n    mkfs -t ext4 ${device}\n  fi\n\n  echo \"mount ${device} ${mountp}\"\n  mount ${device} ${mountp}\n  echo \"${device} ${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\\\"${name}\\\" Key=device,Value=${device} Key=Pipeline_phase,Value=${pipeline_phase} Key=Jive_service,Value=${jive_service}\"\n  aws ec2 create-tags --region ${region} --resources ${current_volume} --tags Key=Name,Value=\"${name}\" Key=device,Value=${device} Key=Pipeline_phase,Value=${pipeline_phase} Key=Jive_service,Value=${jive_service}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x /tmp/ebs_mount.sh\n    /tmp/ebs_mount.sh -d /dev/xvdm:/data/elasticsearch 2\u003e\u00261 \u003e\u003e /tmp/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e /tmp/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=${GAV_COORD[0]}\n             ARTIFACT_ID=${GAV_COORD[1]}\n             VERSION=${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=${NEXUS_BASE}${REST_PATH}${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in ${!PARAM_KEYS[*]}\ndo\n  if [[ ${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"${PARAMS}${PARAM_KEYS[$index]}=${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"${REDIRECT_URL}?${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L ${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x /tmp/get_nexus_artifact.sh\n    /tmp/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e /tmp/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      /tmp/get_nexus_artifact.sh -i $ADDITIONAL_BUNDLE_NAME \u003e /tmp/ansible-${BUNDLE_SHORT_NAME}.tar.gz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    # Create Ansible working directories\n    mkdir -p /tmp/ansible-common\n    tar xf /tmp/ansible-common.tar.gz -C /tmp/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p /tmp/ansible-${BUNDLE_SHORT_NAME}\n      tar xf /tmp/ansible-${BUNDLE_SHORT_NAME}.tar.gz -C /tmp/ansible-${BUNDLE_SHORT_NAME}/\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e /tmp/ansible-common/run_ansible.sh\n#!/bin/bash\n\n# Disabling bootstrap for common roles for now.\n# ansible-playbook -i localhost /tmp/ansible-common/playbook-bootstrap.yml --connection=local 2\u003e\u00261 \u003e\u003e /var/log/ansible-first-run.log\n\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  # I think I have this working now.\n  /tmp/ansible-${BUNDLE_SHORT_NAME}/ansible/bin/call_ansible_${BUNDLE_SHORT_NAME}.sh\n  # /tmp/ansible-${BUNDLE_SHORT_NAME}/ansible/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x /tmp/ansible-common/run_ansible.sh\n    /tmp/ansible-common/run_ansible.sh \u003e\u003e /tmp/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nfunction_ebs_attach\nfunction_nexus\nfunction_ansible\nfunction_restart\n",
                            "template": "#!/bin/bash\n\n# SKIP_EBS_REATTACH - Set to a non-empty string to skip reattaching of any\n#                     unattached matching EBS volumes.\n#                     The ebs_attach script will still run and new volumes\n#                     will be attached/formatted as necessary\n# ADDITIONAL_BUNDLE_NAME - The name of a nexus bundle to download and unpack.\n#                          Leave blank to skip.\n#                          Must contain a script for setting up/calling ansible\n#                          located at/called:\n#           ./ansible/bin/call_ansible_$${BUNDLE_SHORT_NAME}.sh\n#\nSKIP_EBS_REATTACH=${skip_ebs_reattach}\nADDITIONAL_BUNDLE_NAME=${bundle_name}\nBUNDLE_SHORT_NAME=${bundle_short_name}\n\nfunction_prep() {\n    # Get pip for awscli\n    yum install -y epel-release\n    yum install -y python-pip\n    pip install awscli\n}\n\nfunction_ebs_attach() {\n    cat \u003c\u003c'EOF' \u003e /tmp/ebs_mount.sh\n#!/bin/bash -v\n#\n# Usage:\n# ./ebs_mount.sh -d \u003cdevice:mountpoint\u003e[,\u003cdevice:mountpoint\u003e...]\n#\n# Example:\n# ./ebs_mount.sh -d /dev/xvdm:/data/elasticsearch,/dev/xvdn:/data/more_data\n#\ndeclare -r instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\ndeclare -r avail_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n\nregion=\"${region}\"\n\nwhile getopts \"d:n:p:\" opt; do\n  case \"$opt\" in\n  d) devices=$OPTARG\n     ;;\n  esac\ndone\n\nif [ -z $name ]\nthen\n  name=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Name`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\nfi\n\npipeline_phase=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Pipeline_phase`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\njive_service=$(aws ec2 describe-instances --instance-ids $${instance_id} --region $${region} --query 'Reservations[0].Instances[0].Tags[?Key==`Jive_service`]' | python -c 'import sys, json; print json.load(sys.stdin)[0][\"Value\"]')\n\necho \"Pipeline_phase: $${pipeline_phase}\"\necho \"Jive_service: $${jive_service}\"\n\nOLD_IFS=$IFS\nIFS=','\nfor dev_mp_pair in $devices\ndo\n  # I have no idea what I'm doing\n  IFS=':' read -ra PAIR \u003c\u003c\u003c \"$dev_mp_pair\"\n  IFS=','\n  device=$${PAIR[0]}\n  mountp=$${PAIR[1]}\n  echo \"Device: $${device}\"\n  if [ -z $device ]\n  then\n    echo \"[ERROR] Did you specify a device name?\"\n    continue\n  fi\n\n  echo \"MountP: $${mountp}\"\n  if [ -z $mountp ]\n  then\n    echo \"[ERROR] Did you specify a mount point?\"\n    continue\n  fi\n\n  mkdir -p $${mountp}\n\n  if [ -z $${SKIP_EBS_REATTACH} ]\n  then\n    # Search for existing tagged EBS volume (in current AZ)\n    echo \"aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=tag:Pipeline_phase,Values=$${pipeline_phase} Name=tag:Jive_service,Values=$${jive_service} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n    previous_volume=$(aws ec2 describe-volumes --region=$${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=available Name=tag:device,Values=$${device} Name=tag:Name,Values=$${name} Name=tag:Pipeline_phase,Values=$${pipeline_phase} Name=tag:Jive_service,Values=$${jive_service} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n    echo \"Previous volume: $${previous_volume}\"\n  else\n    previous_volume=\"\"\n    echo \"SKIP_EBS_REATTACH is set, not attempting to reattach old volume(s)\"\n  fi\n\n  # find current volume id\n  echo \"aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\\\"Volumes\\\"][0][\\\"VolumeId\\\"]'\"\n  current_volume=$(aws ec2 describe-volumes --region $${region} --filters Name=availability-zone,Values=$${avail_zone} Name=status,Values=in-use Name=attachment.instance-id,Values=$${instance_id} Name=attachment.device,Values=$${device} | python -c 'import sys, json; print json.load(sys.stdin)[\"Volumes\"][0][\"VolumeId\"]')\n\n  if [ $? -ne 0 ]\n  then\n    echo \"[ERROR] Failed to get current volume ID for $${device}\"\n    continue\n  fi\n\n  echo \"Current volume: $${current_volume}\"\n\n  if [ ! -z $previous_volume ]\n  then\n\n    # detach current EBS\n    echo \"detaching current volume: $${current_volume}\"\n    aws ec2 detach-volume --region $${region} --volume-id $${current_volume}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to detach current volume: $${current_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to detach\n    echo \"sleeping for 120 to allow aws time to get its ducks in a row\"\n    sleep 120\n\n    # attach existing EBS\n    aws ec2 attach-volume --region $${region} --volume-id $${previous_volume} --instance-id $${instance_id} --device $${device}\n    if [ $? -ne 0 ]\n    then\n      echo \"[ERROR] Failed to attach previous volume: $${previous_volume}\"\n      continue\n    fi\n\n    # sleep X seconds or something? to give AWS time to attach\n    echo \"sleeping for 120 to allow aws time to get its ducks in a row again\"\n    sleep 120\n\n    current_volume=$${previous_volume}\n\n  else\n    # no previous volume found. assume tabula rasa\n    echo \"No previous volume found. Proceeding...\"\n    echo \"mkfs -t ext4 $${device}\"\n    mkfs -t ext4 $${device}\n  fi\n\n  echo \"mount $${device} $${mountp}\"\n  mount $${device} $${mountp}\n  echo \"$${device} $${mountp} ext4 defaults,nofail 0 2\" \u003e\u003e /etc/fstab\n\n  # add tags to the volume?\n  echo \"aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\\\"$${name}\\\" Key=device,Value=$${device} Key=Pipeline_phase,Value=$${pipeline_phase} Key=Jive_service,Value=$${jive_service}\"\n  aws ec2 create-tags --region $${region} --resources $${current_volume} --tags Key=Name,Value=\"$${name}\" Key=device,Value=$${device} Key=Pipeline_phase,Value=$${pipeline_phase} Key=Jive_service,Value=$${jive_service}\n\ndone\nIFS=$OLD_IFS\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x /tmp/ebs_mount.sh\n    /tmp/ebs_mount.sh -d ${devices} 2\u003e\u00261 \u003e\u003e /tmp/ebs_mount.log\n}\n\nfunction_nexus() {\n    # URL redirect fails without this entry\n    echo \"10.10.100.155 nexus-int.eng.jiveland.com\" \u003e\u003e /etc/hosts\n\n    # Script to download Ansible artifact from Nexus\n    cat \u003c\u003c'EOF' \u003e /tmp/get_nexus_artifact.sh\n#!/bin/bash\n# Argument = -h -v -i groupId:artifactId:version -c classifier -p packaging -r repository\n\n# Define Nexus Configuration\nNEXUS_BASE=nexus-int.eng.jiveland.com\nREST_PATH=/service/local\nART_REDIR=/artifact/maven/redirect\n\n# Read in Complete Set of Coordinates from the Command Line\nGROUP_ID=\nARTIFACT_ID=\nVERSION=\"LATEST\"\nCLASSIFIER=\"\"\nPACKAGING=tar.gz\nREPO=\"candidates\"\nVERBOSE=0\n\nwhile getopts \"hvi:c:p:\" OPTION\ndo\n     case $OPTION in\n         h)\n             usage\n             exit 1\n             ;;\n         i)\n\t     OIFS=$IFS\n             IFS=\":\"\n\t     GAV_COORD=( $OPTARG )\n\t     GROUP_ID=$${GAV_COORD[0]}\n             ARTIFACT_ID=$${GAV_COORD[1]}\n             VERSION=$${GAV_COORD[2]}\n\t     IFS=$OIFS\n             ;;\n         c)\n             CLASSIFIER=$OPTARG\n             ;;\n         p)\n             PACKAGING=$OPTARG\n             ;;\n         v)\n             VERBOSE=1\n             ;;\n         ?)\n             usage\n             exit\n             ;;\n     esac\ndone\n\nif [[ -z $GROUP_ID ]] || [[ -z $ARTIFACT_ID ]] || [[ -z $VERSION ]]\nthen\n     echo \"BAD ARGUMENTS: Either groupId, artifactId, or version was not supplied\" \u003e\u00262\n     usage\n     exit 1\nfi\n\n# Construct the base URL\nREDIRECT_URL=$${NEXUS_BASE}$${REST_PATH}$${ART_REDIR}\n\n# Generate the list of parameters\nPARAM_KEYS=( g a v r p c )\nPARAM_VALUES=( $GROUP_ID $ARTIFACT_ID $VERSION $REPO $PACKAGING $CLASSIFIER )\nPARAMS=\"\"\nfor index in $${!PARAM_KEYS[*]}\ndo\n  if [[ $${PARAM_VALUES[$index]} != \"\" ]]\n  then\n    PARAMS=\"$${PARAMS}$${PARAM_KEYS[$index]}=$${PARAM_VALUES[$index]}\u0026\"\n  fi\ndone\n\nREDIRECT_URL=\"$${REDIRECT_URL}?$${PARAMS}\"\n\necho \"Fetching Artifact from $REDIRECT_URL...\" \u003e\u00262\ncurl -sS -L $${REDIRECT_URL}\nEOF\n    # Run script to download latest Ansible artifact and unpack\n    chmod +x /tmp/get_nexus_artifact.sh\n    /tmp/get_nexus_artifact.sh -i com.jivesoftware.techops:ansible-common:LATEST \u003e /tmp/ansible-common.tar.gz\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      /tmp/get_nexus_artifact.sh -i $ADDITIONAL_BUNDLE_NAME \u003e /tmp/ansible-$${BUNDLE_SHORT_NAME}.tar.gz\n    fi\n}\n\nfunction_ansible() {\n    # Need Sudo TTY\n    sed -i s/'Defaults    requiretty'/'#Defaults    requiretty'/ /etc/sudoers\n    # Disable SELINUX for SSSD\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n    # Create Ansible working directories\n    mkdir -p /tmp/ansible-common\n    tar xf /tmp/ansible-common.tar.gz -C /tmp/ansible-common/\n    if [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\n    then\n      mkdir -p /tmp/ansible-$${BUNDLE_SHORT_NAME}\n      tar xf /tmp/ansible-$${BUNDLE_SHORT_NAME}.tar.gz -C /tmp/ansible-$${BUNDLE_SHORT_NAME}/\n    fi\n    # Set Python to 2.6 and run Ansible locally\n    alternatives --set python /usr/bin/python2.6\n    yum install -y yum-python26 python-boto ansible\n\n    # Script to run Ansible locally\n    cat \u003c\u003cEOF \u003e /tmp/ansible-common/run_ansible.sh\n#!/bin/bash\n\n# Disabling bootstrap for common roles for now.\n# ansible-playbook -i localhost /tmp/ansible-common/playbook-bootstrap.yml --connection=local 2\u003e\u00261 \u003e\u003e /var/log/ansible-first-run.log\n\nif [ ! -z \"$ADDITIONAL_BUNDLE_NAME\" ]\nthen\n  # I think I have this working now.\n  /tmp/ansible-$${BUNDLE_SHORT_NAME}/ansible/bin/call_ansible_$${BUNDLE_SHORT_NAME}.sh\n  # /tmp/ansible-$${BUNDLE_SHORT_NAME}/ansible/bin/call_ansible.sh\nfi\nEOF\n    # Run Ansible\n    chmod +x /tmp/ansible-common/run_ansible.sh\n    /tmp/ansible-common/run_ansible.sh \u003e\u003e /tmp/ansible-common/ansible_debug.log\n}\n\nfunction_restart() {\n    # Need to restart for SELINUX change.\n    shutdown -r now\n}\n\n# Run the things\nfunction_prep\nfunction_ebs_attach\nfunction_nexus\nfunction_ansible\nfunction_restart\n",
                            "vars.#": "7",
                            "vars.account_name": "jive-data-pipeline",
                            "vars.bundle_name": "com.jivesoftware.techops:ansible-cloudsearch-elasticsearch:LATEST",
                            "vars.bundle_short_name": "cloudsearch",
                            "vars.devices": "/dev/xvdm:/data/elasticsearch",
                            "vars.pipeline_phase": "integ",
                            "vars.region": "us-west-2",
                            "vars.skip_ebs_reattach": ""
                        }
                    }
                }
            }
        }
    ]
}
